---
title: "Take Home Exercise 2"
subtitle: fish
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
author: "Fangxian"
execute: 
  eval: true
  warning: false
date: "4 June 2023"
date-modified: "`r Sys.Date()`"
---

# Task

Using the data provide by the VAST challenge, we are looking into the [Mini-Challenge 2](https://vast-challenge.github.io/2023/MC2.html) (MC2) to identify compaines possibly engaged in illegal, unreported, and unregulated (IUU) fishing.

When looking into IUU, we need to understand transshipment plays crucial roles in facilitating IUU fishing. Fishing ships will transfer its catch to other ships which would launder the catch to other countries - presumably their won. According to [OCEANS](https://www.oceansinc.earth/transshipment#:~:text=Transshipment%20can%20facilitate%20IUU%20fishing,fish%20to%20be%20%E2%80%9Claundered%E2%80%9D.), as many as 20% of global fishing catch is from IUU sources.

Below, we will use Social Network Analysis (SNA) to understand to observe if we could uncover suspicious IUU activities.

# Data Preparation

## Load Packages

The code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R. The packages installed are

-   `tidyverse`: A collection of core packages designed for data science, used extensively for data preparation and wrangling.

-   `ggplot2`: Used for plotting different types of graphs.

-   `ggthemes`: Provide additional themes for `ggplot2` .

```{r}
pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse, lubridate, ggplot2, ggthemes, igraph, patchwork, ggrepel,heatmaply)
```

## Data Importing and wraggling

Import the main MC2 data and some buddle data.

```{r}
MC2 <- jsonlite::fromJSON("data/mc2_challenge_graph.json")
catfish <- jsonlite::fromJSON("data/bundles/carp.json")
tuna <- jsonlite::fromJSON("data/bundles/tuna.json")

glimpse(MC2)
```

Run the below code chunk to preparing the node data. Upon looking into the node data, there are many missing data, to reduce the noise, we remove the missing data from here for further analysis.

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id,shpcountry,rcvcountry)

glimpse(MC2_nodes)

any(is.na(MC2_nodes))

MC2_nodes_cleaned <- na.omit(MC2_nodes)

any(is.na(MC2_nodes_cleaned))
```

Run the below code chunk to prepare trhe edge data. *Month_Yr* and *Year* were extracted for the temporal analysis in the later part.

```{r}
MC2_edges <- as_tibble(MC2$links) %>%
  mutate(
    Date = as.Date(arrivaldate),
    Month_Yr = format(Date, "%Y-%m"),
    Year = year(Date)) %>%
  select(source, target, Date, Month_Yr, Year, hscode) %>% 
  distinct()
```

Hscode is the Harmonized System with standardized numerical method of classifying traded products. Since we are interested in the fish related products, hscode that is related to fish and its products are shown in the table below.

[![](data/fishhscode.PNG){fig-align="center"}](https://www.fao.org/3/cb3813en/cb3813en.pdf)

Code chunk is run to filter all the hscode with fish related trades and identify the top 3 most traded fish products, namely,

1.  306170: Other shirmps and prawns
2.  304620: Catfish
3.  160414: Tunas, Skipjack And Bonito (sarda Spp), Prepared Or Preserved, Whole Or In Pieces, But Not Minced

```{r}
distinct_hscode <- unique(MC2_edges$hscode)
filtered_hscode <- distinct_hscode[grepl("^30[1-8]|^160[4-5]|^2301|^1212|^1302|^1504|^151610|^151790",distinct_hscode)]

filtered_MC2_edges <- MC2_edges[MC2_edges$hscode %in% filtered_hscode, ]

top_3_hscode <- filtered_MC2_edges %>%
  count(hscode) %>%
  arrange(desc(n)) %>%
  head(3) %>%
  pull(hscode)

top_3_hscode
```

```{r}
MC2_edges_aggregated_306170 <- filtered_MC2_edges %>%
  filter(hscode == "306170")%>%
  group_by(source, target, hscode, Month_Yr, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  filter(weights > 10) %>%
  ungroup()

glimpse(MC2_edges_aggregated_306170)
```

```{r}
id1 <- MC2_edges_aggregated_306170 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_306170 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_306170 <- rbind(id1, id2) %>%
  distinct()
```

# Data Visualization

```{r}
mc2_graph_306170 <- tbl_graph(nodes = MC2_nodes_extracted_306170,
                       edges = MC2_edges_aggregated_306170,
                       directed = TRUE)
```

Many

```{r}
set.seed (1234)
V(mc2_graph_306170)$degree <- degree(mc2_graph_306170, mode = "in")

ggraph(mc2_graph_306170, 'igraph', algorithm = 'fr') + 
  geom_edge_link0(aes(width = weights), edge_alpha = 0.1) + 
  geom_node_point(aes(size = degree), colour = 'steelblue') + 
  geom_node_text(aes(label = id, filter = degree > 60), color = 'black', 
                 size = 3, repel = TRUE) + 
  theme_graph()
```

```{r}
set.seed (1234)
V(mc2_graph_306170)$degree <- degree(mc2_graph_306170, mode = "out")

ggraph(mc2_graph_306170, 'igraph', algorithm = 'fr') + 
  geom_edge_link0(aes(width = weights), edge_alpha = 0.1) + 
  geom_node_point(aes(size = degree), colour = 'steelblue') + 
  geom_node_text(aes(label = id, filter = degree > 40), color = 'black', 
                 size = 3, repel = TRUE) + 
  theme_graph()

```

```{r}
MC2_edges_aggregated_306170$Month_Yr <- as.Date(paste0(MC2_edges_aggregated_306170$Month_Yr, "-01"), format = "%Y-%m-%d")


top_50_weights <- MC2_edges_aggregated_306170 %>%
  top_n(50, wt = weights)

 ggplot(top_50_weights, aes(x=Month_Yr, y=source, fill=weights))+
  geom_tile(colour="White", show.legend=FALSE)+
  theme_classic()+
  scale_fill_distiller(palette="Spectral")


```

```{r}
 ggplot(top_50_weights, aes(x=Month_Yr, y=target, fill=weights))+
  geom_tile(colour="White", show.legend=FALSE)+
  theme_classic()+
  scale_fill_distiller(palette="Spectral")
 
```

Finding the cluster, check if can label the cluster for each node.

# Interactive Network Graph

```{r}
edges_df <- mc2_graph_306170 %>%
  activate(edges) %>%
  as_tibble()

nodes_df <- mc2_graph_306170 %>%
  activate(nodes) %>%
  as.tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label) %>%
  mutate(group = label)
```

```{r}
visNetwork(nodes_df,
           edges_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```
